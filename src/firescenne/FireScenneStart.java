/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package firescenne;

import dao.DataSourceSQLite;
import dao.DataUserImpl;
import domain.Info;
import gui.panels.EditPanel;
import gui.panels.LoginJPanel;
import gui.panels.SarchedPanel;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.File;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.ControllerEvent;
import javax.media.ControllerListener;
import javax.media.Manager;
import javax.media.Player;
import javax.media.RealizeCompleteEvent;
import javax.media.Time;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import org.omg.PortableServer.THREAD_POLICY_ID;
import util.EnumCardLayer;
import util.TimeToFromStr;

/**
 *
 * @author viorel.cojocaru
 */
public class FireScenneStart extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(FireScenneStart.class.getName());
    Time in;
    SarchedPanel jSarchedPanel;
    EditPanel jEditPanel;
    LoginJPanel jLoginPanel;
    TimeToFromStr convertTimp;
    boolean apasat = false;

    /**
     * Creates new form FireScenneStart
     */
    public FireScenneStart() {
        initComponents();
        addComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel3PlayerOn = new javax.swing.JPanel();
        jLabelFileName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabelTimeIn = new javax.swing.JLabel();
        jLabelTimeOut = new javax.swing.JLabel();
        jLabelFilePath = new javax.swing.JLabel();
        jPanelButtonInOut = new javax.swing.JPanel();
        jButtonTimeIn = new javax.swing.JButton();
        jButtonTimeOut = new javax.swing.JButton();
        jButtonPlayerPause = new javax.swing.JButton();
        jPanelMain = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpenFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemLogare = new javax.swing.JMenuItem();
        jMenuItemExitProgram = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3PanouDeCautare = new javax.swing.JMenuItem();
        jMenuItem1PanouDeEditare = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemAdmin = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel3PlayerOn.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3PlayerOn.setMaximumSize(new java.awt.Dimension(446, 292));
        jPanel3PlayerOn.setMinimumSize(new java.awt.Dimension(446, 292));
        jPanel3PlayerOn.setRequestFocusEnabled(false);
        jPanel3PlayerOn.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3PlayerOn, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(jLabelFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelFileName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3PlayerOn, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setText("Timp In");

        jLabel2.setText("Timp Out");

        jLabelTimeIn.setText("00:00:00");

        jLabelTimeOut.setText("00:00:00");

        jLabelFilePath.setText("jLabel3");
        jLabelFilePath.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelTimeOut)
                            .addComponent(jLabelTimeIn)))
                    .addComponent(jLabelFilePath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(192, 192, 192))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelTimeIn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelTimeOut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelFilePath)
                .addGap(63, 63, 63))
        );

        jButtonTimeIn.setText("In");
        jButtonTimeIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTimeInActionPerformed(evt);
            }
        });

        jButtonTimeOut.setText("Out");
        jButtonTimeOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTimeOutActionPerformed(evt);
            }
        });

        jButtonPlayerPause.setText("Play");
        jButtonPlayerPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayerPauseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelButtonInOutLayout = new javax.swing.GroupLayout(jPanelButtonInOut);
        jPanelButtonInOut.setLayout(jPanelButtonInOutLayout);
        jPanelButtonInOutLayout.setHorizontalGroup(
            jPanelButtonInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonInOutLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jButtonTimeIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPlayerPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTimeOut)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jPanelButtonInOutLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonTimeIn, jButtonTimeOut});

        jPanelButtonInOutLayout.setVerticalGroup(
            jPanelButtonInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonInOutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelButtonInOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTimeIn)
                    .addComponent(jButtonTimeOut)
                    .addComponent(jButtonPlayerPause))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelMain.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelMain.setLayout(new java.awt.CardLayout());

        jMenuFile.setText("File");
        jMenuFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuFileActionPerformed(evt);
            }
        });

        jMenuItemOpenFile.setText("Deschide fisier Video");
        jMenuItemOpenFile.setEnabled(false);
        jMenuItemOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpenFile);
        jMenuFile.add(jSeparator1);

        jMenuItemLogare.setText("Logare administrator");
        jMenuItemLogare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLogareActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemLogare);

        jMenuItemExitProgram.setText("Iesire din program");
        jMenuItemExitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitProgramActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExitProgram);

        jMenuBar1.add(jMenuFile);

        jMenu2.setText("Edit");

        jMenuItem3PanouDeCautare.setText("Panel de cautare");
        jMenuItem3PanouDeCautare.setEnabled(false);
        jMenuItem3PanouDeCautare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3PanouDeCautareActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3PanouDeCautare);

        jMenuItem1PanouDeEditare.setText("Panel de editare");
        jMenuItem1PanouDeEditare.setEnabled(false);
        jMenuItem1PanouDeEditare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1PanouDeEditareActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1PanouDeEditare);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Setari");

        jMenuItemAdmin.setText("Seteaza parola noua");
        jMenuItemAdmin.setEnabled(false);
        jMenuItemAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAdminActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAdmin);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(332, Short.MAX_VALUE)
                .addComponent(jPanelButtonInOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(323, 323, 323))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelButtonInOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuFileActionPerformed
    }//GEN-LAST:event_jMenuFileActionPerformed

    private void jMenuItemOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenFileActionPerformed
        openFile();
        if (player == null) {
            createPlayer();
        } else {
            removePreviousPlayer();
            createPlayer();
            jButtonPlayerPause(false);

        }
    }//GEN-LAST:event_jMenuItemOpenFileActionPerformed

    private void jButtonTimeInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTimeInActionPerformed
        convertTimp = new TimeToFromStr();
        if (file != null) {
            in = player.getMediaTime();
            int sec = (int) in.getSeconds();
            jLabelTimeIn.setText(convertTimp.timeToString(sec));
        }
    }//GEN-LAST:event_jButtonTimeInActionPerformed

    private void jButtonTimeOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTimeOutActionPerformed
        convertTimp = new TimeToFromStr();
        if (file != null) {
            in = player.getMediaTime();
            int sec = (int) in.getSeconds();
            jLabelTimeOut.setText(convertTimp.timeToString(sec));
        }
    }//GEN-LAST:event_jButtonTimeOutActionPerformed

    private void jButtonPlayerPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayerPauseActionPerformed
        if (file != null) {
            if (apasat) {
                player.stop();
                jButtonPlayerPause.setText("Play");
                apasat = false;
            } else {
                player.start();
                jButtonPlayerPause.setText("Pause");
                apasat = true;
            }
        }
    }//GEN-LAST:event_jButtonPlayerPauseActionPerformed

    private void jMenuItemExitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitProgramActionPerformed
        exit();
    }//GEN-LAST:event_jMenuItemExitProgramActionPerformed

    private void jMenuItemLogareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLogareActionPerformed
        this.showCard(EnumCardLayer.LOGIN);
        jMenuItem3PanouDeCautare.setEnabled(false);
        jMenuItemOpenFile.setEnabled(false);
        jMenuItemOpenFile.setEnabled(false);
        jMenuItem1PanouDeEditare.setEnabled(false);
        jMenuItemAdmin.setEnabled(false);
    }//GEN-LAST:event_jMenuItemLogareActionPerformed
    public void loadUser() {
        this.showCard(EnumCardLayer.SARCHED);
        Boolean userLoad = false;
        jMenuItemOpenFile.setEnabled(userLoad);
        jMenuItem3PanouDeCautare.setEnabled(true);
    }

    public void loadAdmin() {
        this.showCard(EnumCardLayer.EDITABLE);
        Boolean userLoad = true;
        jMenuItemOpenFile.setEnabled(userLoad);
        jMenuItemAdmin.setEnabled(userLoad);
        jMenuItem1PanouDeEditare.setEnabled(userLoad);
        jMenuItem3PanouDeCautare.setEnabled(userLoad);
    }
    private void jMenuItemAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAdminActionPerformed

        showInsertPassword();

    }//GEN-LAST:event_jMenuItemAdminActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        exit();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        
        
        
        //      
//        if (System.getProperty("os.name").startsWith("Windows")) {
//            // includes: Windows 2000,  Windows 95, Windows 98, Windows NT, Windows Vista, Windows XP        
//            File f = new File("C:\\Program Files\\FireScenne\\DB\\scenedb.sqlite");
//
//            if (f.exists()) {
//            } else {
//                boolean success = (new File("C:\\Program Files\\FireScenne\\DB\\")).mkdirs();
//                if (success) {
//                    DataSourceSQLite dataSource = DataSourceSQLite.getInstance();                    
//                    dataSource.creazaDB();
//                }
//            }
//        } else {
//            // everything else
//
//            File f = new File("home/FireScenne/DB/scenedb.sqlite");
//
//            if (f.exists()) {
//            } else {
//                boolean success = (new File("home/FireScenne/DB/")).mkdirs();
//                if (success) {
//                    DataSourceSQLite dataSource = DataSourceSQLite.getInstance();
//                    dataSource.creazaDB();
//                }
//            }
//        }
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem3PanouDeCautareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3PanouDeCautareActionPerformed
        this.showCard(EnumCardLayer.SARCHED);
    }//GEN-LAST:event_jMenuItem3PanouDeCautareActionPerformed

    private void jMenuItem1PanouDeEditareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1PanouDeEditareActionPerformed
        this.showCard(EnumCardLayer.EDITABLE);
    }//GEN-LAST:event_jMenuItem1PanouDeEditareActionPerformed
    private void showInsertPassword() {
        DataUserImpl userDao = DataUserImpl.getInstance();
        JLabel jUserName = new JLabel("Nume User");
        JComboBox jComboUserName = new JComboBox(new String[]{"User", "Adminitrator"});

        JLabel jPassword = new JLabel("Parola noua");
        JTextField password = new JPasswordField();
        JLabel jPasswordVeche = new JLabel("Parola Administrator");
        JTextField passwordVeche = new JPasswordField();
        Object[] ob = {jUserName, jComboUserName, jPassword, password, jPasswordVeche, passwordVeche};
        int result = JOptionPane.showConfirmDialog(null, ob, "Introdu parola "
                + "noua apoi confirma cu parola Administrator", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            int userId = jComboUserName.getSelectedIndex();
            String passwordValue = password.getText();
            String passwordOldValue = passwordVeche.getText();
            LOG.info("userId=" + userId + " passwordValue="
                    + passwordValue + " parola veche administrator="
                    + passwordOldValue);
            if (userDao.verifyUserData(1, passwordOldValue)) {
                userDao.updatePasword(userId, passwordValue);
            } else {
                JOptionPane.showInternalMessageDialog(null, "Incalcare drepturi",
                        "information", JOptionPane.ERROR_MESSAGE);
                this.loadUser();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FireScenneStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FireScenneStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FireScenneStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FireScenneStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FireScenneStart().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPlayerPause;
    private javax.swing.JButton jButtonTimeIn;
    private javax.swing.JButton jButtonTimeOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelFileName;
    private javax.swing.JLabel jLabelFilePath;
    private javax.swing.JLabel jLabelTimeIn;
    private javax.swing.JLabel jLabelTimeOut;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1PanouDeEditare;
    private javax.swing.JMenuItem jMenuItem3PanouDeCautare;
    private javax.swing.JMenuItem jMenuItemAdmin;
    private javax.swing.JMenuItem jMenuItemExitProgram;
    private javax.swing.JMenuItem jMenuItemLogare;
    private javax.swing.JMenuItem jMenuItemOpenFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel3PlayerOn;
    private javax.swing.JPanel jPanelButtonInOut;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
    private File file;

    private void openFile() {

        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(
                JFileChooser.FILES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            file = null;
        } else {
            file = fileChooser.getSelectedFile();
            LOG.info("fisier este " + file.getAbsolutePath());

        }
    }
    //cream un player
    private Player player;
    // private MediaPlayer player;

    private void createPlayer() {
        if (file == null) {
            return;
        }
        try {
            jLabelFileName.setText(file.getName());
            jLabelFilePath.setText(file.getAbsolutePath());
            player = Manager.createPlayer(file.toURL());
            player.addControllerListener(new EventHandler());
            player.realize();
            jButtonPlayerPause.requestFocus();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Locaţia fişierului este invalidă", "Erroare de încărcare",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public void exit() {
        try {
            Thread.sleep(500);

        } catch (InterruptedException ex) {
            Logger.getLogger(FireScenneStart.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }

    public void changeStateOFMenu(boolean b) {
        if (b) {
            jMenuItemOpenFile.setEnabled(true);
            jMenuItem1PanouDeEditare.setEnabled(true);
            jMenuItemAdmin.setEnabled(true);
        } else {
            jMenuItemOpenFile.setEnabled(false);
            jMenuItem1PanouDeEditare.setEnabled(false);
            jMenuItemAdmin.setEnabled(false);
        }
    }

    public String getTimeInStr() {
        String timeInStr = jLabelTimeIn.getText();
        return timeInStr;
    }

    public String getTimeOutStr() {
        String timeOutStr = jLabelTimeOut.getText();
        return timeOutStr;
    }

    public String getFileNameStr() {
        String fileName = jLabelFilePath.getText();
        return fileName;
    }

    public void pornesteClipul(String filePath, String timeIn, String timeOut) {
        file = new File(filePath);
        System.out.println("din porneste clipul filePath=" + filePath + " timeIn=" + timeIn + " timeOut=" + timeOut);
        jLabelFileName.setText(filePath);
        jLabelTimeIn.setText(timeIn);
        jLabelTimeOut.setText(timeOut);
        TimeToFromStr tr = new TimeToFromStr();
        int intSec = tr.stringToTime(timeIn);
        int outSec = tr.stringToTime(timeOut);
        if (player == null) {
            createPlayer();
        } else {
            removePreviousPlayer();
            createPlayer();
            jButtonPlayerPause(false);
        }
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(FireScenneStart.class.getName()).log(Level.SEVERE, null, ex);
        }

        player.setMediaTime(new Time((double) intSec));
       // jButtonPlayerPause(true);
        player.start();
        jButtonPlayerPause.setText("Pause");
            jButtonPlayerPause.requestFocus();
            apasat = true;
        player.setStopTime(new Time((double) outSec));
        jButtonPlayerPause(false);


    }

    private void createPlayer(int timeInSec, int timeOutSec) {
        if (file == null) {
            return;
        }
        try {
            jLabelFileName.setText(file.getName());
            jLabelFilePath.setText(file.getAbsolutePath());

            player = Manager.createPlayer(file.toURL());

            player.addControllerListener(new EventHandler());
            player.start();
            player.stop();
            System.out.println("am facut stop la player la primul");
            Time startPlay = new Time((double) timeInSec);
            player.setMediaTime(startPlay);
            System.out.println("am facut start la player startPlay");
            Time stopPlay = new Time((double) timeOutSec);
            // player.setStopTime(stopPlay);
            System.out.println("am facut stop la player stopPlay ");
            jButtonPlayerPause.setText("Pause");
            jButtonPlayerPause.requestFocus();
            // start player

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Locaţia fişierului este invalidă", "Erroare de încărcare",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButtonPlayerPause(boolean b) {
        if (b) {
            jButtonPlayerPause.setText("Pause");
            jButtonPlayerPause.requestFocus();
            apasat = true;
        } else {
            jButtonPlayerPause.setText("Play");
            jButtonPlayerPause.requestFocus();
            apasat = false;
        }

    }

    public void incarcaDateId(String idStr) {  
       
    jEditPanel.incarcaDateleInComp(idStr);
        System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");   
    
    }

    public void setTime_In(String time_in) {
        jLabelTimeIn.setText(time_in);
    }

    public void setTime_Out(String time_out) {
        jLabelTimeOut.setText(time_out);
    }

    public void accesAdmin() {
        changeStateOFMenu(true);
    }

    

    private class EventHandler implements ControllerListener {

        public void controllerUpdate(ControllerEvent e) {
            if (e instanceof RealizeCompleteEvent) {
                Component visualComponent =
                        player.getVisualComponent();
                if (visualComponent != null) {
                    jPanel3PlayerOn.add(visualComponent, BorderLayout.CENTER);
                } else {
                }
                Component controlsComponent =
                        player.getControlPanelComponent();
                if (controlsComponent != null) {
                    jPanel3PlayerOn.add(controlsComponent, BorderLayout.SOUTH);
                }
                jPanel3PlayerOn.doLayout();
            }
        }
    }

    private void addComponents() {
        jEditPanel = new EditPanel(this);
        jSarchedPanel = new SarchedPanel(this);
        jLoginPanel = new LoginJPanel(this);
        jLabelFilePath.setVisible(false);
        jLabelFilePath.setText("");

        jPanelMain.add(jLoginPanel, EnumCardLayer.LOGIN.getLayer());
        jPanelMain.add(jEditPanel, EnumCardLayer.EDITABLE.getLayer());
        jPanelMain.add(jSarchedPanel, EnumCardLayer.SARCHED.getLayer());
    }

    public void showCard(String selectedString) {
        CardLayout cl = (CardLayout) jPanelMain.getLayout();
        cl.show(jPanelMain, selectedString);
    }

    public void showCard(EnumCardLayer cardsLabel) {
        CardLayout cl = (CardLayout) jPanelMain.getLayout();
        cl.show(jPanelMain, cardsLabel.getLayer());
    }

    private void removePreviousPlayer() {
        if (player == null) {
            return;
        }
        player.stop();
        Component visual = player.getVisualComponent();
        Component control = player.getControlPanelComponent();
        if (visual != null) {
            jPanel3PlayerOn.remove(visual);
        }
        if (control != null) {
            jPanel3PlayerOn.remove(control);
        }
        player.close();
        player = null;
        jPanel3PlayerOn.revalidate();
    }
}
